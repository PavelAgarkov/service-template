services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: "habrdb"
      POSTGRES_USER: "habrpguser"
      POSTGRES_PASSWORD: "pgpwd4habr"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ./postgres-config/scripts/:/docker-entrypoint-initdb.d
      - ./postgres-config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgres-config/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - habrdb-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - service-template
    command: >
      postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U habrpguser -d habrdb" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
  
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbit-service-template # Фиксированное имя хоста
    ports:
      - "5672:5672"       # Порт для подключения клиентов
      - "15672:15672"     # Порт для доступа к Management UI
    environment:
      RABBITMQ_DEFAULT_USER: user # Логин для доступа к Management UI
      RABBITMQ_DEFAULT_PASS: password # Пароль для доступа к Management UI
      RABBITMQ_NODENAME: rabbit-service-template # Фиксированное имя узла
      RABBITMQ_ERLANG_COOKIE: rabbit-service-template-cookie # Секретный cookie для кластера
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - service-template
  
  #RabbitMQ Management UI: http://localhost:15672 (логин: user, пароль: password).
  #Grafana: http://localhost:3111 (логин: admin, пароль: admin).
  rabbitmq-monitor:
    image: grafana/grafana:latest
    container_name: rabbitmq_monitor
    ports:
      - "3111:3000"  # Порт для доступа к Grafana
    depends_on:
      - rabbitmq
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    #      - GF_INSTALL_PLUGINS=grafana-rabbitmq-datasource
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - service-template
  
#    redis://myuser:mypassword@localhost:6379
#    redis://myuser:mypassword@redis-service-template:6379
  redis:
    image: redis:7.0.12
    container_name: redis
    hostname: redis-service-template
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf", "--appendonly", "yes" ]
    volumes:
      - redis_data:/data
      - ./redis-config/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - service-template
    restart: unless-stopped
    
  etcd:
    image: quay.io/coreos/etcd:v3.5.0
    container_name: etcd
    environment:
      - ETCD_ENABLE_V2=false
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_ADVERTISE_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://0.0.0.0:2380
      - ETCD_INITIAL_CLUSTER=default=http://0.0.0.0:2380
      - ETCD_INITIAL_CLUSTER_STATE=new
      - ETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster-1
    ports:
      - "2379:2379"
      - "2380:2380"
    volumes:
      - etcd-data:/etcd-data
      - ./etcd-entrypoint.sh:/etcd-entrypoint.sh
    entrypoint: [ "/bin/sh", "/etcd-entrypoint.sh" ]
    networks:
      - service-template

volumes:
  rabbitmq_data:
  grafana_data:
  habrdb-data:
  redis_data:
  etcd-data:

networks:
  service-template:
    driver: bridge